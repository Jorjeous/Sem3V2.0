#include <stdio.h>
#include <sys/stat.h>
#include <string.h>
#include <fcntl.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <unistd.h>
#include <assert.h>
#include <stdlib.h>

#define BUFFERSIZE 50
#define NAMEDPIPE1 "/home/george/Desktop/projects/messege/myNamedPipe1"
#define NAMEDPIPE2 "/home/george/Desktop/projects/messege/myNamedPipe2"

//mr. A & mr. B
//    1       2


// FIXIT: 1) закомментированный код = ненужный код -> нужно удалить
// 2) Не понимаю, зачем вам нужно 3 процесса для решения задачи. Почему 2х мало?
// 3) Код в значительной степени дублируется для 1го и 2го собеседников. Нужно избежать этого

int main(int argc, char* argv[])
{

    char buf1[BUFFERSIZE] = {0};
    char buf2[BUFFERSIZE] = {0};
    int fd1, fd2, len;
    pid_t pid1 = 0;
    pid_t pid2 = 0;
    printf("START");
    if(mkfifo(NAMEDPIPE1, 0777))
    {
        //perror("Ctreate_1");
        //return 1;
    }
    //printf("%s(1), is created", NAMEDPIPE1);

    {
        //perror("Ctreate_2");
        //return 1;
    }
    //printf("%s(2), is created", NAMEDPIPE2);
    pid1 = fork();
    if(pid1 < 0)
    {
        perror("Fork");
        return 1;
    }
    if(pid1)
    {
        pid2 = fork();
    }
    if(avrc < 2){
    printf("Error, wtite 1 or 2");
    exit(1);
    }
    
    if(atoi(argv[1]) == 1)
    {
        if(!pid1)                     //runns by pid1
        {
            fd2 = open(NAMEDPIPE1, O_WRONLY);
            //printf("Ok 1");
        }
        if(!pid2 && pid1)          //runs by pid2
        {
            fd1 = open(NAMEDPIPE2, O_RDONLY);
        }
        printf("first");
       	while(1)
        {
            //printf("%d", j);
            //memset(buf1, '\0', BUFFERSIZE);
            //memset(buf2, '\0', BUFFERSIZE);
            if(!pid1 && !pid2)
            {
                //printf("[1]%d", j);
                fgets(buf1, BUFFERSIZE, stdin);
                write(fd2, buf1, BUFFERSIZE);
            }
            if(!pid2 && pid1)
            {
                //printf("[3]%d", j);
                read(fd1, buf2, BUFFERSIZE);
                fprintf(stdout, "Incoming messege(1):%s", buf2);

            }
        }

    }
    if(atoi(argv[1]) == 2)
    {
        if(!pid1)                     //runns by pid1
        {
            fd2 = open(NAMEDPIPE2, O_WRONLY);
        }
        if(!pid2 && pid1)          //runs by pid2
        {
            fd1 = open(NAMEDPIPE1, O_RDONLY);
        }
        printf("second");
        while(1)
        {

            //memset(buf1, '\0', BUFFERSIZE);
            //memset(buf2, '\0', BUFFERSIZE);
            if(!pid1 && !pid2)
            {
                //printf("(1)%d", i);
                fgets(buf1, BUFFERSIZE, stdin);
                write(fd2, buf1, BUFFERSIZE);
            }
            if(!pid2 && pid1)
            {
                //printf("(2)%d", i);
                read(fd1, buf2, BUFFERSIZE);
                fprintf(stdout, "Incoming messege(2):%s", buf2);

            }
        }

    }
    printf("Hello World!\n");
    return 0;
}
