#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>


//size of matrix
#define MAX 1000
#define MAX_THREAD 1000
#define PART 1000



int matA[MAX][MAX];
int matB[MAX][MAX];
int matC[MAX][MAX];
int step_i = 0;

void* multi()
{
    int core = step_i++;

    // Each thread computes 1/PATR  of matrix multiplication
    for (int i = core * MAX / PART; i < (core + 1) * MAX / PART; i++){
        for (int j = 0; j < MAX; j++){
            for (int k = 0; k < MAX; k++){
                matC[i][j] += matA[i][k] * matB[k][j];
            }
        }
    }

}
int main()
{
    int time1;
    int time2;
    int i, j, k;
    int* p;
    time1 =time(NULL);
    //random values in matA and matB
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            matA[i][j] = rand() % 10;
            matB[i][j] = rand() % 10;
        }
    }

    // Show matA
    printf("\n MatrixA \n");
    for (i = 0; i < MAX; i++){
        for (j = 0; j < MAX; j++){
            printf("%d ", matA[i][j]);
        }
        printf("\n");
    }

    // Show matB
    printf("\n MatrixB \n");
    for (i = 0; i < MAX; i++){
        for (j = 0; j < MAX; j++){
            printf("%d ", matB[i][j]);
        }
    printf("\n");
    }


    pthread_t threads[MAX_THREAD];

    // Creating MAXTHREAD amount of threads, each should calc its own part
    for (i = 0; i < MAX_THREAD; i++) {
        pthread_create(&threads[i], NULL, multi, (void*)(p));
    }

    // waiting for all threads to do their job
    for (i = 0; i < MAX_THREAD; i++){
        pthread_join(threads[i], NULL);
    }

    printf("\n Multiplication of A and B \n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++){
            printf("%d ", matC[i][j]);
        }
        printf("\n");
    }
    time2 = time(NULL);
    printf("\n time:%d\n", time2-time1);
    return 0;

}
