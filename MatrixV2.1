#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

/* FIXIT:
2) 


= step_i++; вот здесь у вас состояние гонки ...(Нужно ли пробовать исправть с помощью мютекса, или стоит придумать что то другое?)(исправил по другому))
3) лучше замеряйте время только перемножения матриц ... без генерации и вывода на экран(готово)
вы действительно ждали каждый раз как выведутся несколько миллионов чисен на консоль?(нет конечно)
4) приведите в комментарии к коду фактически измеренное ускорение( фактически код замедляется примерно в 5 раз, при 1000 нитей)
5) удостоверьтесь, что при фиксированных матрицах на входе у вас один и тот же результат перемножения(да, результат получается один и тот же)
при различном количестве используемых нитей)
*/

//size of matrix
#define MAX 1000
#define MAX_THREAD 1000
#define PART 1000



int matA[MAX][MAX];
int matB[MAX][MAX];
int matC[MAX][MAX];
int core[MAX_THREAD];
int step_i = 0;



void* multi(void* arg)
{
    int core = (int) arg;

    // Each thread computes 1/PATR  of matrix multiplication
    for (int i = core * MAX / PART; i < (core + 1) * MAX / PART; i++){
        for (int j = 0; j < MAX; j++){
            for (int k = 0; k < MAX; k++){
                matC[i][j] += matA[i][k] * matB[k][j];
            }
        }
    }

}
int main()
{
    double time1;
    double time2;
    int i, j, k;
    int step[MAX_THREAD];

    for(i = 1; i <= MAX; i++){
        step[i] = i;
    }

    //random values in matA and matB
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++) {
            matA[i][j] = rand() % 10;
            matB[i][j] = rand() % 10;
        }
    }


    time1 = get_wall_time();
   
    pthread_t threads[MAX_THREAD];

    // Creating MAXTHREAD amount of threads, each should calc its own part
    for (i = 0; i < MAX_THREAD; i++) {
        pthread_create(&threads[i], NULL, multi, (void*)(&step[i]));
    }

    // waiting for all threads to do their job
    for (i = 0; i < MAX_THREAD; i++){
        pthread_join(threads[i], NULL);
    }
        
    time2 = get_wall_time();

    printf("\n Multiplication of A and B \n");
    for (i = 0; i < MAX; i++) {
        for (j = 0; j < MAX; j++){
            printf("%d ", matC[i][j]);
        }
        printf("\n");
    }

    printf("\n time:%d\n", time2-time1);
    return 0;

}




















/*    // Show matA
    printf("\n MatrixA \n");
    for (i = 0; i < MAX; i++){
        for (j = 0; j < MAX; j++){
            printf("%d ", matA[i][j]);
        }
        printf("\n");
    }

    // Show matB
    printf("\n MatrixB \n");
    for (i = 0; i < MAX; i++){
        for (j = 0; j < MAX; j++){
            printf("%d ", matB[i][j]);
        }
    printf("\n");
    }*/

    
